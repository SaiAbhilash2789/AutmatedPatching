#APIGateway version-o
Code -1:
import os
import json
import logging
from urllib.request import Request, urlopen

SLACK_WEBHOOK_URL = os.environ['SLACK_WEBHOOK_URL']
SLACK_CHANNEL = os.environ['SLACK_CHANNEL']

logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    print("Received event: " + json.dumps(event, indent=2))

    # Send Slack message with multiple approval buttons and one deny button
    slack_message = {
        "channel": SLACK_CHANNEL,
        "text": "EC2 Instance is scheduled for Patching",
        "attachments": [
            {
                "text": "Click on the preferred action below:",
                "fallback": "Click on the preferred action below:",
                "callback_id": "ec2_removal_approval_option_1",
                "color": "#3AA3E3",
                "attachment_type": "default",
                "actions": [
                    {
                        "name": "approval_decision",
                        "text": "APPROVE Option 1",
                        "style": "primary",
                        "type": "button",
                        "value": "i-09db3ec6cdb1c6449",
                        "confirm": {
                            "title": "Are you sure?",
                            "text": "Instance i-09db3ec6cdb1c6449 will be unavailable for some time until the patching gets completed",
                            "ok_text": "Yes",
                            "dismiss_text": "No"
                        }
                    },
                    {
                        "name": "approval_decision",
                        "text": "DENY Option 1",
                        "style": "danger",
                        "type": "button",
                        "value": "DENY"
                    }
                ]
            },
            {
                "text": "Click on the preferred action below:",
                "fallback": "Click on the preferred action below:",
                "callback_id": "ec2_removal_approval_option_2",
                "color": "#3AA3E3",
                "attachment_type": "default",
                "actions": [
                    {
                        "name": "approval_decision",
                        "text": "APPROVE Option 2",
                        "style": "primary",
                        "type": "button",
                        "value": "i-09db3ec6cdb1c6448",
                        "confirm": {
                            "title": "Are you sure?",
                            "text": "Instance i-09db3ec6cdb1c6448 will be unavailable for some time until the patching gets completed",
                            "ok_text": "Yes",
                            "dismiss_text": "No"
                        }
                    },
                    {
                        "name": "approval_decision",
                        "text": "DENY Option 2",
                        "style": "danger",
                        "type": "button",
                        "value": "DENY"
                    }
                ]
            },
            {
                "text": "Click on the preferred action below:",
                "fallback": "Click on the preferred action below:",
                "callback_id": "ec2_removal_approval_option_3",
                "color": "#3AA3E3",
                "attachment_type": "default",
                "actions": [
                    {
                        "name": "approval_decision",
                        "text": "APPROVE Option 3",
                        "style": "primary",
                        "type": "button",
                        "value": "i-09db3ec6cdb1c6447",
                        "confirm": {
                            "title": "Are you sure?",
                            "text": "Instance i-09db3ec6cdb1c6447 will be unavailable for some time until the patching gets completed",
                            "ok_text": "Yes",
                            "dismiss_text": "No"
                        }
                    },
                    {
                        "name": "approval_decision",
                        "text": "DENY Option 3",
                        "style": "danger",
                        "type": "button",
                        "value": "DENY"
                    }
                ]
            }
        ]
    }

    req = Request(SLACK_WEBHOOK_URL, json.dumps(slack_message).encode('utf-8'))
    response = urlopen(req)
    response.read()

    return None





Code-2:
import os
import json
import logging
import boto3

SLACK_VERIFICATION_TOKEN = os.environ['SLACK_VERIFICATION_TOKEN']
SQS_QUEUE_URL = os.environ['SQS_QUEUE_URL']  # Replace this with your SQS queue URL

logger = logging.getLogger()
logger.setLevel(logging.INFO)

sqs_client = boto3.client('sqs')

def send_to_sqs(instance_id):
    message = f"Instance ID {instance_id} has been approved!"
    response = sqs_client.send_message(
        QueueUrl=SQS_QUEUE_URL,
        MessageBody=message
    )
    return response

def lambda_handler(event, context):
    logger.info("Received event: " + json.dumps(event, indent=2))

    # Validate the Slack verification token to ensure the request is from Slack
    if 'token' not in event or event['token'] != SLACK_VERIFICATION_TOKEN:
        return {
            "statusCode": 401,
            "body": "Unauthorized"
        }

    # Extract information from the incoming Slack event
    callback_id = event['callback_id']
    user_name = event['user']['name']
    action = event['actions'][0]['name']
    value = event['actions'][0]['value']

    if action == 'approval_decision' and value != 'DENY':
        # Process the approval decision based on the value (instance ID)
        instance_id = value
        response = send_to_sqs(instance_id)
        logger.info("SQS response: " + json.dumps(response, indent=2))

        response_text = f"Hi {user_name}, you have approved the patching for Instance ID {instance_id}. The instance will be unavailable for some time until the patching is completed."

    elif action == 'approval_decision' and value == 'DENY':
        # Process the denial decision
        response_text = f"Hi {user_name}, you have denied the patching request."

    else:
        # Unexpected action
        response_text = "Invalid action. Please try again."

    # Respond to Slack with the acknowledgment message
    response_payload = {
        "text": response_text
    }

    return {
        "statusCode": 200,
        "headers": {
            "Content-Type": "application/json"
        },
        "body": json.dumps(response_payload)
    }
