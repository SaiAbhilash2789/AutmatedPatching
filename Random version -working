#Random version -working
import os
import json
import logging
from urllib.request import Request, urlopen
import boto3

# This is passed as a plain-text environment variable for ease of demonstration.
# Consider encrypting the value with KMS or use an encrypted parameter in Parameter Store for production deployments.
SLACK_WEBHOOK_URL = os.environ['SLACK_WEBHOOK_URL']
SLACK_CHANNEL = os.environ['SLACK_CHANNEL']

logger = logging.getLogger()
logger.setLevel(logging.INFO)


def send_message_to_sqs(payload):
    sqs_client = boto3.client('sqs')
    queue_url = 'https://sqs.us-east-1.amazonaws.com/581356085423/Patching_Ec2Instance_Queue'  # Replace this with the URL of your SQS queue

    response = sqs_client.send_message(
        QueueUrl=queue_url,
        MessageBody=json.dumps(payload)
    )

    return response


def lambda_handler(event, context):
    print("Received event: " + json.dumps(event, indent=2))

    # Send Slack message with approval buttons
    slack_message = {
        "channel": SLACK_CHANNEL,
        "text": "EC2 Instance is scheduled for Patching",
        "attachments": [
            {
                "text": "Click on APPROVE to proceed with the Patching",
                "fallback": "Click on APPROVE to proceed with the Patching",
                "callback_id": json.dumps({"approve": True}),
                "color": "#3AA3E3",
                "attachment_type": "default",
                "actions": [
                    {
                        "name": "approve",
                        "text": "APPROVE",
                        "style": "danger",
                        "type": "button",
                        "value": "approve",
                        "confirm": {
                            "title": "Are you sure?",
                            "text": "Instance will be unavailable for some time until the patching gets completed",
                            "ok_text": "Yes",
                            "dismiss_text": "No"
                        }
                    },
                    {
                        "name": "deny",
                        "text": "DENY",
                        "type": "button",
                        "value": "deny"
                    }
                ]
            }
        ]
    }

    req = Request(SLACK_WEBHOOK_URL, json.dumps(slack_message).encode('utf-8'))
    response = urlopen(req)
    response.read()

    return None
