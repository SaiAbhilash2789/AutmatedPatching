Code -1 :
#FinalVersion-SlackApproval-Ready
import os
import json
import logging
from urllib.request import Request, urlopen

# This is passed as a plain-text environment variable for ease of demonstration.
# Consider encrypting the value with KMS or use an encrypted parameter in Parameter Store for production deployments.
SLACK_WEBHOOK_URL = os.environ['SLACK_WEBHOOK_URL']
SLACK_CHANNEL = os.environ['SLACK_CHANNEL']

logger = logging.getLogger()
logger.setLevel(logging.INFO)


def lambda_handler(event, context):
    print("Received event: " + json.dumps(event, indent=2))

    # Send Slack message with approval buttons
    slack_message = {
        "channel": SLACK_CHANNEL,
        "text": "We can use our own text here", #It will hightlight this line text while asking the slack approval
        "attachments": [
            {
                "text": "We can use our own text here", #It will hightlight this line text while asking the slack approval
                "fallback": "You are unable to perform the action",
                "callback_id": "ec2_removal_approval",
                "color": "#3AA3E3",
                "attachment_type": "default",
                "actions": [
                    {
                        "name": "remove_instances",
                        "text": "Yes",
                        "style": "danger",
                        "type": "button",
                        "value": json.dumps({"approve": True}),
                        "confirm": {
                            "title": "Are you sure?",
                            "text": "This will remove the instances from the load balancer",
                            "ok_text": "Yes",
                            "dismiss_text": "No"
                        }
                    },
                    {
                        "name": "remove_instances",
                        "text": "No",
                        "type": "button",
                        "value": json.dumps({"approve": False})
                    }
                ]
            }
        ]
    }

    req = Request(SLACK_WEBHOOK_URL, json.dumps(slack_message).encode('utf-8'))
    response = urlopen(req)
    response.read()

    return None




Code-2 :
import boto3
import json

def send_sqs_message(queue_url, message_body):
    sqs_client = boto3.client('sqs')
    response = sqs_client.send_message(
        QueueUrl=queue_url,
        MessageBody=json.dumps(message_body)
    )
    return response

def lambda_handler(event, context):
    # Replace 'QUEUE_URL' with the URL of your SQS queue
    queue_url = 'https://sqs.us-east-1.amazonaws.com/581356085423/Patching_Ec2Instance_Queue'

    # Example message in JSON format
    message = {
        "instance_id": "i-09db3ec6cdb1c6446",
    }

    # Sending the message to the SQS queue
    response = send_sqs_message(queue_url, message)
    print(f"Message sent to SQS queue with MessageId: {response['MessageId']}")

    return {
        "statusCode": 200,
        "body": json.dumps("AMI to be created soon")
    }




Code -3:
import os
import json
import boto3
import requests
from datetime import datetime

def send_slack_message(webhook_url, message):
    data = {'text': message}
    response = requests.post(webhook_url, json=data)
    return response

def create_ami(instance_id):
    ec2_client = boto3.client('ec2')
    timestamp = datetime.now().strftime('%Y%m%d-%H%M%S-%A')
    ami_name_with_timestamp = f"My-Instance-Image-{timestamp}"
    response = ec2_client.create_image(InstanceId=instance_id, Name=ami_name_with_timestamp, NoReboot=True)

    # Add Name tag to the created AMI with the same name as AMI name
    ami_id = response['ImageId']
    ec2_client.create_tags(Resources=[ami_id], Tags=[{'Key': 'Name', 'Value': ami_name_with_timestamp}])

    # Wait for the image to be available
    ec2_client.get_waiter('image_available').wait(ImageIds=[ami_id])

    return ami_id

def lambda_handler(event, context):
    try:
        # Get the Slack webhook URL and EC2 instance ID from environment variables
        webhook_url = os.environ['SLACK_WEBHOOK_URL']

        # Process SQS event records
        for record in event['Records']:
            # Assuming your SQS messages are JSON-formatted
            message_body = json.loads(record['body'])

            # Extract EC2 instance ID from the SQS message
            instance_id = message_body['instance_id']

            # Create the AMI with timestamp in the name and add the Name tag
            ami_id = create_ami(instance_id)

            # Append the instance ID to the message
            slack_message = f"AMI created with ID: {ami_id} for Instance: {instance_id}"
            send_slack_message(webhook_url, slack_message)

    except Exception as e:
        print(f"Error: {str(e)}")
        raise
